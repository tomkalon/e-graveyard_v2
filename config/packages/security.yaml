security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Core\Domain\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      form_login:
        default_target_path: admin_web_user_index
        login_path: app_login
        check_path: app_login
      logout:
        path: app_logout
        target: main_web_index
      remember_me:
        secret:   '%kernel.secret%'
        lifetime: 10800
      entry_point: App\Core\Domain\Security\AuthenticationEntryPoint
      access_denied_handler: App\Core\Domain\Security\AccessDeniedHandler
    secured_area:
      form_login:
        enable_csrf: true
        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#the-firewall
        
        # https://symfony.com/doc/current/security/impersonating_user.html
        # switch_user: true
  
  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin/login, roles: PUBLIC_ACCESS }
    - { path: ^/admin/register, roles: PUBLIC_ACCESS }
    - { path: ^/admin/reset_password, roles: PUBLIC_ACCESS }
    - { path: ^/admin/logout, roles: ROLE_USER }
    - { path: ^/admin/user, roles: ROLE_USER }
    - { path: ^/api, roles: ROLE_MANAGER }
    - { path: ^/admin, roles: ROLE_MANAGER }
    - { path: ^/api/admin/graveyard, roles: ROLE_ADMIN }
    - { path: ^/api/admin/user, roles: ROLE_ADMIN }
    - { path: ^/admin/graveyard, roles: ROLE_ADMIN }
    - { path: ^/admin/user/list, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
  role_hierarchy:
    ROLE_ADMIN: [ ROLE_MANAGER ]
    ROLE_MANAGER: [ ROLE_USER ]

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
