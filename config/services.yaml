# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  app.title: '%env(APP_TITLE)%'
  app.sender.email: '%env(APP_SENDER_EMAIL)%'
  app.sender.name: '%env(APP_SENDER_NAME)%'
  app.register.link.expiration: '%env(APP_REGISTER_LINK_EXPIRATION)%'
  app.path.grave_images: '%kernel.project_dir%/public/uploads%env(APP_GRAVE_IMAGE_PATH)%'
  app.path.grave_images.thumbnails: '%kernel.project_dir%/public/uploads%env(APP_GRAVE_IMAGE_THUMB_PATH)%'
  app.grave.image.max.width: '%env(APP_GRAVE_IMAGE_MAX_WIDTH)%'
  app.grave.image.max.height: '%env(APP_GRAVE_IMAGE_MAX_HEIGHT)%'
  default_timezone: '%env(APP_TIMEZONE)%'

services:
  # default configuration for services in *this* file
  _defaults:
      autowire: true      # Automatically injects dependencies in your services.
      autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
      
  _instanceof:
    App\Core\Application\CQRS\Command\CommandHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: command.bus }
    App\Core\Application\CQRS\Query\QueryHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: query.bus }

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
      resource: '../src/'
      exclude:
          - '../src/DependencyInjection/'
          - '../src/Core/Domain/Entity/'
          - '../src/Kernel.php'

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

### SERVICES ###
  # GRAVE IMAGE UPLOAD #
  App\Admin\Application\Service\File\Grave\GraveImageUploaderService:
    arguments:
      $targetDirectory: '%app.path.grave_images%'
      $targetThumbnailDirectory: '%app.path.grave_images.thumbnails%'
      $maxImageWidth: '%app.grave.image.max.width%'
      $maxImageHeight: '%app.grave.image.max.height%'
      
### COMMANDS ###
  App\Admin\Application\Command\User\SendRegistrationLinkCommandHandler:
    arguments:
      $registerLinkExpiration: '%app.register.link.expiration%'
      $senderEmail: '%app.sender.email%'
      $senderName: '%app.sender.name%'
      $timeConverterUtility: '@App\Core\Infrastructure\Utility\TimeConverter\ConvertSecondsToHoursUtility'
      
  App\Admin\Application\Command\User\ResetPasswordCommandHandler:
    arguments:
      $senderEmail: '%app.sender.email%'
      $senderName: '%app.sender.name%'
      $timeConverterUtility: '@App\Core\Infrastructure\Utility\TimeConverter\ConvertSecondsToMinutesUtility'
      
### CLI ###
  App\Admin\Infrastructure\Cli\CreateUploadDirectoryCommand:
    arguments:
      $graveImagePath: '%app.path.grave_images%'
      $graveImageThumbPath: '%app.path.grave_images.thumbnails%'

### EVENT LISTENERS ###
  App\Core\Domain\EventListener\LoginSuccessListener:
    arguments:
      $tokenStorage: '@security.token_storage'
    tags:
      - { name: kernel.event_subscriber }
      
  # DOCTRINE ENTITY PERSIST
  App\Core\Infrastructure\Event\Doctrine\PersistEntityEvent:
    tags:
      - { name: doctrine.event_listener, event: postPersist }
  App\Core\Infrastructure\Event\Doctrine\UpdateEntityEvent:
    tags:
      - { name: doctrine.event_listener, event: postUpdate }
  App\Core\Infrastructure\Event\Doctrine\RemoveEntityEvent:
    arguments:
      $targetDirectory: '%app.path.grave_images%'
      $targetThumbnailDirectory: '%app.path.grave_images.thumbnails%'
    tags:
      - { name: doctrine.event_listener, event: postRemove }
